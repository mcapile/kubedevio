Modulo 20 - exercios CKAD Treinamento Fabricio Veronez.
kubedev.io


### Question 1
Get the Pods from all namespaces.


Write down its content.
#kubectl get pod --all-namespaces 

NAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE
default         api-deployment-5cf9dc996f-ng8cm             1/1     Running     16         9d
default         mongodb-deployment-bb4bcd945-8f7cd          1/1     Running     1          9d
ingress-nginx   ingress-nginx-admission-create-dszbv        0/1     Completed   0          28d
ingress-nginx   ingress-nginx-admission-patch-mwxm9         0/1     Completed   1          28d
ingress-nginx   ingress-nginx-controller-5d88495688-v5r8n   1/1     Running     8          28d
kube-system     coredns-74ff55c5b-gc4sl                     1/1     Running     8          28d
kube-system     etcd-minikube                               1/1     Running     8          28d
kube-system     kube-apiserver-minikube                     1/1     Running     9          28d
kube-system     kube-controller-manager-minikube            1/1     Running     13         28d
kube-system     kube-proxy-88kd5                            1/1     Running     8          28d
kube-system     kube-scheduler-minikube                     1/1     Running     8          28d
kube-system     metrics-server-657f6584b6-kbdng             0/1     Running     827        28d
kube-system     storage-provisioner                         1/1     Running     64         28d

########################################### Question 2
Create a namespace called ns-2.

#kubectl create namespace ns-2

Create the following Pods in that namespace:

A pod called nginx1 with a single container running the nginx:1.7.9 image
A pod called nginx2 that has one container running the nginx:1.17.4 image
A pod called haproxy that has one container running the haproxy:2.0.7 image
All pods should have a label of type app=proxy.

Write down the output of kubectl get pods for the ns-2 namespace.

 kubectl get pod -n ns-2
NAME                       READY   STATUS    RESTARTS   AGE
haproxy-755c899bf7-tk46j   1/1     Running   0          4m8s
nginx1-84b58464cc-gp96g    1/1     Running   0          59m
nginx2-74d79c9cdc-gmxqz    1/1     Running   0          51m

################################################## Question 3
Retrieve all labels for the running container in the ns-2 namespace.

Write down its content.

Kubectl get po --show-labels
NAME                       READY   STATUS    RESTARTS   AGE     LABELS
haproxy-755c899bf7-tk46j   1/1     Running   0          6m14s   app=proxy,pod-template-hash=755c899bf7
nginx1-84b58464cc-gp96g    1/1     Running   0          61m     app=proxy,pod-template-hash=84b58464cc
nginx2-74d79c9cdc-gmxqz    1/1     Running   0          53m     app=proxy,pod-template-hash=74d79c9cdc

###*=########################################### Question 4
Add additional labels to the Pods:

Manifesto :

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx1
  labels: 
    app: proxy
    version: '1'
    webserver: nginx
spec:
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      labels:
        app: proxy
        version: '1'
        webserver: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9

nginx1 should have a label of type webserver=nginx and a label of type version=1
nginx2 should have a label of type webserver=nginx and a label of type version=2
haproxy should have a label of type webserver=haproxy and a label of type version=1
Write down the output of kubectl get pods for the ns-2 namespace.
 kubectl get pod -n ns-2
NAME                       READY   STATUS    RESTARTS   AGE
haproxy-767b8df67d-n7vf6   1/1     Running   0          4m
nginx1-78557b6df5-9zgps    1/1     Running   0          8m6s
nginx2-867b59b448-7tk9b    1/1     Running   0          6m9s


### ################################################Question 5
Annotate the Pods with the following annotations:

nginx1 should have an annotation of description="first deployment"
nginx2 should have an annotation of description="second deployment"

kubectl annotate pod nginx1-78557b6df5-9zgps description='first deployment' -n ns-2
kubectl annotate pod nginx2-867b59b448-7tk9b description='second deployment' -n ns-2

#################################################Question 6
With a single command, retrieve the Pods with the label webserver=nginx.

Write down the command.

kubectl get pod -l webserver=nginx -n ns-2    
NAME                      READY   STATUS    RESTARTS   AGE
nginx1-78557b6df5-9zgps   1/1     Running   0          3h15m
nginx2-867b59b448-7tk9b   1/1     Running   0          3h13m

############################################ Question 7
With a single command, retrieve the Pods with the label version=1.

Write down the command.
 kubectl get pod -l version=1 -n ns-2          
NAME                       READY   STATUS    RESTARTS   AGE
haproxy-767b8df67d-n7vf6   1/1     Running   0          3h17m
nginx1-78557b6df5-9zgps    1/1     Running   0          3h21m

############################################# Question 8
Retrieve the annotation for the haproxy Pod.

Write down its content.
kubectl get pod -l webserver=haproxy -n ns-2  
NAME                       READY   STATUS    RESTARTS   AGE
haproxy-767b8df67d-n7vf6   1/1     Running   0          3h18m

############################################# Question 9
Create a Deployment with the image nginx:1.17.4.

The Deployment should:

be called nginx
have 2 replicas
expose port 80
include the label webserver=nginx for all Pods
Write down the output of kubectl get pods and kuebctl get deployments for the ns-2 namespace.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels: 
    webserver: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      webserver: nginx
  template:
    metadata:
      labels:
        webserver: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
      

 kubectl get pod -n ns-2       
NAME                       READY   STATUS    RESTARTS   AGE
haproxy-767b8df67d-n7vf6   1/1     Running   0          3h36m
nginx-7db978dd74-klsnc     1/1     Running   0          45s
nginx-7db978dd74-q2j68     1/1     Running   0          45s
nginx1-78557b6df5-9zgps    1/1     Running   0          3h40m
nginx2-867b59b448-7tk9b    1/1     Running   0          3h38m
kubectl get deployment -n ns-2
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
haproxy   1/1     1            1           5h57m
nginx     2/2     2            2           59s
nginx1    1/1     1            1           6h4m
nginx2    1/1     1            1           5h57m

######################################## Question 10
Write down the YAML file for the ReplicaSet that was created by the nginx Deployment.

kubectl describe deployment nginx -n ns-2
NewReplicaSet:   nginx-7db978dd74 (2/2 replicas created)


 kubectl get replicaset nginx-7db978dd74 -n ns-2 -o yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  annotations:
    deployment.kubernetes.io/desired-replicas: "2"
    deployment.kubernetes.io/max-replicas: "3"
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2021-08-06T01:35:48Z"
  generation: 1
  labels:
    pod-template-hash: 7db978dd74
    webserver: nginx
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:deployment.kubernetes.io/desired-replicas: {}
          f:deployment.kubernetes.io/max-replicas: {}
          f:deployment.kubernetes.io/revision: {}
        f:labels:
          .: {}
          f:pod-template-hash: {}
          f:webserver: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"1c86a955-f987-4f3f-879e-49f2d9cdbef2"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        f:replicas: {}
        f:selector: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:pod-template-hash: {}
              f:webserver: {}
          f:spec:
            f:containers:
              k:{"name":"nginx"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":80,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
      f:status:
        f:availableReplicas: {}
        f:fullyLabeledReplicas: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-08-06T01:36:22Z"
  name: nginx-7db978dd74
  namespace: ns-2
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: nginx
    uid: 1c86a955-f987-4f3f-879e-49f2d9cdbef2
  resourceVersion: "240588"
  uid: a354f402-64d1-4b60-9f46-13b388135832
spec:
  replicas: 2
  selector:
    matchLabels:
      pod-template-hash: 7db978dd74
      webserver: nginx
  template:
    metadata:
      creationTimestamp: null
      labels:
        pod-template-hash: 7db978dd74
        webserver: nginx
    spec:
      containers:
      - image: nginx:1.7.9
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 2
  fullyLabeledReplicas: 2
  observedGeneration: 1
  readyReplicas: 2
  replicas: 2

######################################## Question 11
Downgrade the nginx Deployment to use the nginx:1.16.1 image.

Write down the output of kubectl get replicaset for the ns-2 namespace.


 kubectl get replicaset -n ns-2                
NAME                 DESIRED   CURRENT   READY   AGE
haproxy-755c899bf7   0         0         0       5h19m
haproxy-758976dc57   0         0         0       6h
haproxy-767b8df67d   1         1         1       3h45m
haproxy-86bc474b87   0         0         0       6h6m
nginx-5b9946ddfb     1         1         0       13s
nginx-7db978dd74     2         2         2       10m
nginx1-549c8f68f8    0         0         0       3h51m
nginx1-78557b6df5    1         1         1       3h49m
nginx1-84b58464cc    0         0         0       6h14m
nginx2-74d79c9cdc    0         0         0       6h6m
nginx2-867b59b448    1         1         1       3h47m

################################################# Question 12
Downgrade, again, the nginx Deployment to use the nginx:1.7.0 image.

Write down the status of the rollout.
Kubectl rollout history deployment nginx -n ns-2
deployment.apps/nginx 
REVISION  CHANGE-CAUSE
2         <none>
3         <none>
4         <none>


########################################### Question 13
Inspect the history of the nginx Deployment.

Rollback to version 1.

Write down the output of history command for the nginx Deployment in the ns-2 namespace.

Kubectl rollout undo deployment 
Name:                   nginx
Namespace:              ns-2
CreationTimestamp:      Thu, 05 Aug 2021 22:35:48 -0300
Labels:                 webserver=nginx
Annotations:            deployment.kubernetes.io/revision: 5
                        kubectl.kubernetes.io/last-applied-configuration:
                          {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"webserver":"nginx"},"name":"nginx","namespace":"ns-2"}...
Selector:               webserver=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  webserver=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Host Port:    0/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-7db978dd74 (2/2 replicas created)
Events:
  Type    Reason             Age                From                   Message
  ----    ------             ----               ----                   -------
  Normal  ScalingReplicaSet  11m                deployment-controller  Scaled up replica set nginx-7db978dd74 to 1
  Normal  ScalingReplicaSet  11m                deployment-controller  Scaled down replica set nginx-5b9946ddfb to 1
  Normal  ScalingReplicaSet  11m (x2 over 15h)  deployment-controller  Scaled up replica set nginx-7db978dd74 to 2
  Normal  ScalingReplicaSet  10m                deployment-controller  Scaled down replica set nginx-5b9946ddfb to 0
  Normal  ScalingReplicaSet  3m55s              deployment-controller  Scaled up replica set nginx-7bc5cbc6fc to 1
  Normal  ScalingReplicaSet  40s                deployment-controller  Scaled down replica set nginx-7bc5cbc6fc to 0

##################################################### Question 14
Scale the nginx Deployment to three replicas.

 kubectl scale replicaset nginx-7bc5cbc6fc --replicas=3 -n ns-2
replicaset.apps/nginx-7bc5cbc6fc scaled

 kubectl get pod -l webserver=nginx -n ns-2    
NAME                      READY   STATUS    RESTARTS   AGE
nginx-7db978dd74-4lbzp    1/1     Running   0          18m
nginx-7db978dd74-m7w6s    1/1     Running   0          18m
nginx1-78557b6df5-9zgps   1/1     Running   0          19h
nginx2-867b59b448-7tk9b   1/1     Running   0          19h

